#
# Complete the 'subscription_summary' function below.
#

# Replace a magic number with a named constant If youâ€™re using a numeric or string literal like 3.14, replace that literal with a named constant like PI.

def subscription_summary(months_subscribed, ad_free_months, video_on_demand_purchases):
    """
    Parameters:
      months_subscribed: How many months each account purchased.
      ad_free_months: How many months each account paid for ad free viewing.
      video_on_demand_purchases: How many Videos on Demand each account purchased.
    """
    print("Welcome to the Ada+ Account Dashboard\n")
    #set list and dictionary      
    max_key_list = [] #  put the key of maximum value
    user_dictionary = {} # pair the account number (keys) and  sum purchase in account ( value)
    sum_ad_and_v_list = [] # each account pay for ad-free and movie
    singel_price = 7
    bundle_price = 18
    ad_free_price = 2
    video_price = 27.99
    
    
    # all formulas
    for i in range(len(months_subscribed)):
       ms = int(months_subscribed[i] / 3) * bundle_price + months_subscribed[i] % 3*singel_price
       ad = ad_free_months[i] * ad_free_price
       v =  video_on_demand_purchases[i] * video_price
       sum_ad_and_v = ad + v
       sum_account = ms + sum_ad_and_v # each user pay all
       sum_ad_and_v_list.append(sum_ad_and_v)
       sum_all_ad_and_v = sum(sum_ad_and_v_list)
       user_dictionary[str(i+1)] = sum_account # pair account and total payment
       sum_all_account = sum(user_dictionary.values())
       def cent(ms,ad,v):
           n = format(ms,'.2f')
           o = format(ad,'.2f')
           m = format(v,'.2f')
           print(f"Account {i+1} made ${format(sum_account,'.2f')} total")
           print(f">>> ${n} from monthly subscription fees")
           print(f">>> ${o} from Ad-free upgrades")       
           print(f">>> ${m} from Video on Demand purchases\n")
       cent(ms,ad,v)
    
    
    
    
        def account_details():
        print(f"Account {i+1} made ${format(sum_account,'.2f')} total")
        print(f">>> ${format(ms,'.2f')} from monthly subscription fees")
        print(f">>> ${format(ad,'.2f')} from Ad-free upgrades")       
        print(f">>> ${format(v,'.2f')} from Video on Demand purchases\n")
        account_details()
    print(f"Combined all accounts made ${sum_all_account} total")
    print(f"Premium content (Ad-free watching and Video on Demand) made ${sum_all_ad_and_v} total\n")
    max_v = max(user_dictionary.values())    # the max payment
    print(f"${max_v} was the most earned by any single account")
    # find the account, which made most payment
    for key,value in user_dictionary.items():
        if value == max_v:
           max_key_list.append(key)
    y = ", ".join("#"+ str(i) for i in max_key_list) 
    print(f"The accounts that earned the most were: {y}")
        
    
    
    
    

if __name__ == '__main__':    
    months_subscribed = []
    ad_free_months = []
    video_on_demand_purchases = []
    
    header = input().strip()

    while header == "months_subscribed:":
        line = input().strip()
        try:
            months_subscribed.append(int(line))
        except ValueError:
            header = line

    while header == "ad_free_months:":
        line = input().strip()
        try:
            ad_free_months.append(int(line))
        except ValueError:
            header = line

    while header == "video_on_demand_purchases:":
        try:
            line = input().strip()

            video_on_demand_purchases.append(int(line))
        except EOFError:
            header = None
            
    subscription_summary(months_subscribed, ad_free_months, video_on_demand_purchases)
